buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
    id 'org.jlleitschuh.gradle.ktlint' version '10.1.0'
    id 'jacoco'
    id 'maven-publish'
}


sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
}

group 'dali.hamza'
version buildVersion(rootProject)

static def buildVersion(rootProject) {
    def gradleV = rootProject.getProperties().get("version")
    if (rootProject.hasProperty("dev-version")) {
            return rootProject.getProperties().get("dev-version")
    }
    return gradleV
}

sourceCompatibility = 1.8
configure([compileKotlin, compileTestKotlin]) {
    kotlinOptions {
        jvmTarget = "$sourceCompatibility"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    def version_kotlin = "1.9.22"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$version_kotlin"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$version_kotlin"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1-native-mt"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testImplementation 'io.github.serpro69:kotlin-faker:1.7.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
}
ktlint {
    debug = true
    verbose = true
}
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    // Adjust the output of the test report
    reports {
        xml.enabled true
        csv.enabled true
    }
}
java {
   withSourcesJar()
}

artifacts {
    archives sourcesJar
}
def props = new Properties()
def file = file("github.properties")
if (file.exists())
    file.withInputStream { props.load(it) }


// Attempts to read the GPR user from local
// project properties and then system environment variables.
static def getGprUser(props) {
    if (props.getProperty("gpr.user") != null) {
        return props.getProperty("gpr.user")
    } else {
        return System.getenv("GPR_USER") ?: ""
    }
}
// Attempts to read the GPR key from local
// project properties and then system environment variables.
static def getGprKey(props) {
    if (props.getProperty("gpr.key") != null) {
        return props.getProperty("gpr.key")
    } else {
        return System.getenv("GPR_KEY") ?: ""
    }
}


def user = getGprUser(props)
def key = getGprKey(props)

publishing {
    repositories {
        maven {
            name = "Mapster-Kotlin"
            url = uri("https://maven.pkg.github.com/$user/KotlinMapster")
            credentials {
                username = user
                password = key
            }
        }
    }
}

